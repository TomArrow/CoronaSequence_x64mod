#pragma once

#include <vector>

#include "dng_sdk/source/dng_stream.h"
#include "dng_sdk/source/dng_lossless_jpeg.h"





namespace corona {

    // The following license is for the content copied (and slightly modified) from the Blackmagic Cintel SDK and for all references to it in this file. There will be a comment indicating the start and end of the Cintel SDK content.
    // The references to it in the code are obvious and self-explanatory.
    /* -LICENSE-START-
        ** Copyright (c) 2018 Blackmagic Design
        **
        ** Permission is hereby granted, free of charge, to any person or organization
        ** obtaining a copy of the software and accompanying documentation covered by
        ** this license (the "Software") to use, reproduce, display, distribute,
        ** execute, and transmit the Software, and to prepare derivative works of the
        ** Software, and to permit third-parties to whom the Software is furnished to
        ** do so, all subject to the following:
        **
        ** The copyright notices in the Software and this entire statement, including
        ** the above license grant, this restriction and the following disclaimer,
        ** must be included in all copies of the Software, in whole or in part, and
        ** all derivative works of the Software, unless such copies or derivative
        ** works are solely in the form of machine-executable object code generated by
        ** a source language processor.
        **
        ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
        ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
        ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
        ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
        ** DEALINGS IN THE SOFTWARE.
        ** -LICENSE-END-
        */
    // Start of Blackmagic Cintel SDK content
    enum Key
    {
        Header = 1,
        FrameInfo = 100,        // [ width, height, ColorModel, Endianness ]
        CodecType = 101,
        CodecName = 102,        // used since Resolve 14.3 (Cintel 2.1) for compressed RAW files
        FrameData = 103,        // pixel data (can be uncompressed or JPEG compressed)
        Negative = 104,     // obsolete, replaced by FilmType
        FlipHorizontal = 105,
        FlipVertical = 106,
        FilmFrameRate = 107,
        FilmType = 108,
        LinearMask = 109,       // 3 x 3
        TimeCode = 110,
        FilmGauge = 111,
        LogMask = 112,      // 3 x 3
        OffsetDetectedH = 113,      // integer stabilization in horizontal direction
        OffsetDetectedV = 114,      // integer stabilization in vertical direction
        ExtendedRange = 115,
        Keykode = 116,
        StabilizerEnabledH = 117,
        StabilizerEnabledV = 118,
        TileSizes = 119,        // 1 x 4, used since Resolve 14.3 (Cintel 2.1) for compressed RAW files
        Gains = 120,        // 1 x 3
        Lifts = 121,        // 1 x 3
        HDRGains = 122,     // 1 x 3
        OffsetToApplyH = 123,      // floating point sub-pixel stabilization in horizontal direction
        OffsetToApplyV = 124,      // floating point sub-pixel stabilization in vertical direction
        SkewToApply = 125,      // floating point skew
        Filler = 1000,      // used by applications that require frame data to be aligned on a particular boundary
    };
    enum ColorModel
    {
        COLOR_MODEL_BAYER_GRGR_CINTEL_10 = 45,

        COLOR_MODEL_BAYER_BGGR_CINTEL_12 = 76,
        COLOR_MODEL_BAYER_GBGB_CINTEL_12 = 77,
        COLOR_MODEL_BAYER_RGRG_CINTEL_12 = 78,
        COLOR_MODEL_BAYER_GRGR_CINTEL_12 = 79,

        COLOR_MODEL_BAYER_BGGR_CINTEL_16 = 88,
        COLOR_MODEL_BAYER_GBGB_CINTEL_16 = 89,
        COLOR_MODEL_BAYER_RGRG_CINTEL_16 = 90,
        COLOR_MODEL_BAYER_GRGR_CINTEL_16 = 91,
    };
    enum ContainerCodecType
    {
        CODEC_TYPE_NONE = 0,
        CODEC_TYPE_VIDEO
    };
    enum FilmType
    {
        FilmTypePositive = 0,
        FilmTypeNegative = 1,
        FilmTypeInterPositive = 2,
        FilmTypeInterNegative = 3
    };

    enum FilmGauge
    {
        Gauge16mm = 0,
        Gauge35mm2Perf = 1,
        Gauge35mm3Perf = 2,
        Gauge35mm4Perf = 3
    };
    enum Endianness
    {
        ENDIAN_BIG = 0,
        ENDIAN_LITTLE
    };
    // End of Blackmagic Cintel SDK content



    enum RAWDATAFORMAT {
        INVALID,
        BAYER12BITDARKCAPSULEDIN16BIT, // 12 bit in a 16 bit wrapper, but such that the image ends up dark.
        BAYER12BITBRIGHTCAPSULEDIN16BIT, // 12 bit in a 16 bit wrapper, but such that the image ends up bright

        // 12 bit packed, with the "12p" standard from FLIR cameras. The other standard is "12packed", which is currently not implemented in this tool.
        // It's like this: AAAAAAAA AAAABBBB BBBBBBBB, with the BBBB in the second bit being the first bytes (not the last) of the second sample
        BAYERRG12p,
        BAYERRG12pV2,
        TIFF12BITPACKED, // For reading dngs
        CINTEL10BIT,
        BAYER10p1 // MotionCam
    };


    typedef struct { byte bayer[2][2]; } bayerPattern_t;







    class dng_memory_stream_simple : public ::dng_stream
    {

    protected:

        byte* dataPointer;

        uint64_t myDataLength;

    public:

        /// Construct a new memory-based stream.
        /// \param allocator Allocator to use to allocate memory in stream as needed.
        /// \param sniffer If non-NULL used to check for user cancellation.
        /// \param pageSize Unit of allocation for data stored in stream.

        dng_memory_stream_simple(byte* data,uint64_t dataLength);

        //virtual ~dng_memory_stream_simple();

    protected:

        virtual uint64 DoGetLength();

        virtual void DoRead(void* data,
            uint32 count,
            uint64 offset);

        //virtual void DoSetLength(uint64 length);

        //virtual void DoWrite(const void* data,
        //   uint32 count,
        //    uint64 offset);

    };


    class dng_memory_spooler_simple: public  ::dng_spooler
    {

    protected:

        std::vector<byte> myData;

        //virtual ~dng_memory_spooler_simple()
       // {
        //}

    public:

        void Spool(const void* data,
            uint32 count);

        virtual void DoRead(void* data,
            uint32 count,
            uint64 offset);

        std::vector<byte>* getDataVectorPointer();

    };




}
